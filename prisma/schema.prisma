// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type             String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token         String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  workspaces    Workspace[] @relation("WorkspaceMembers")
  ownedWorkspaces Workspace[] @relation("WorkspaceOwner")
  petLogs       PetLog[]
  invitesCreated Invite[] @relation("InviteCreatedBy")
  invitesUsed    Invite[] @relation("InviteUsedBy")
  performedLogs  PetLog[] @relation("PerformedBy")
  tickets       Ticket[]
  ticketMessages TicketMessage[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workspace {
  id          String      @id @default(cuid())
  name        String
  description String?
  ownerId     String
  owner       User        @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  members     User[]      @relation("WorkspaceMembers")
  pets        Pet[]
  invites     Invite[]
  plan        Plan        @default(FREE)
  planExpiresAt DateTime?
  customLogTypes CustomLogType[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Pet {
  id          String   @id @default(cuid())
  name        String
  species     String
  breed       String?
  birthDate   DateTime?
  image       String?
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  logs        PetLog[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PetLog {
  id        String   @id @default(cuid())
  type      LogType
  notes     String?
  timestamp DateTime @default(now())
  petId     String
  pet       Pet      @relation(fields: [petId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  performedById String?
  performedBy   User?    @relation("PerformedBy", fields: [performedById], references: [id])
  createdAt DateTime @default(now())
}

enum LogType {
  PEE
  POOP
  FEEDING
  MEDICATION
  VET_VISIT
  WALK
  PLAY
  OTHER
}

model Invite {
  id           String   @id @default(cuid())
  code         String   @unique
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  createdById  String
  createdBy    User     @relation("InviteCreatedBy", fields: [createdById], references: [id])
  expiresAt    DateTime?
  usedById     String?
  usedBy       User?    @relation("InviteUsedBy", fields: [usedById], references: [id])
  createdAt    DateTime @default(now())
}

enum Role {
  USER
  SUPERADMIN
}

model Ticket {
  id          String         @id @default(cuid())
  subject     String
  description String
  status      TicketStatus   @default(OPEN)
  priority    TicketPriority @default(MEDIUM)
  userId      String
  user        User           @relation(fields: [userId], references: [id])
  messages    TicketMessage[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model TicketMessage {
  id        String   @id @default(cuid())
  content   String
  ticketId  String
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  WAITING_USER
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum Plan {
  FREE
  PREMIUM
}

model CustomLogType {
  id          String    @id @default(cuid())
  name        String
  icon        String?   @default("üìù")
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
}
